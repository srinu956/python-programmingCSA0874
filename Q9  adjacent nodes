class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def swapPairs(head):
    dummy = ListNode(0)
    dummy.next = head
    current = dummy

    while current.next and current.next.next:
        first = current.next
        second = current.next.next
        
        # Swap the nodes
        first.next = second.next
        second.next = first
        current.next = second
        
        # Move to the next pair
        current = first

    return dummy.next

# Helper function to create a linked list from a list
def create_linked_list(lst):
    dummy_head = ListNode(0)
    current = dummy_head
    for number in lst:
        current.next = ListNode(number)
        current = current.next
    return dummy_head.next

# Helper function to convert linked list to a list
def linked_list_to_list(node):
    lst = []
    while node:
        lst.append(node.val)
        node = node.next
    return lst

# Test Case 1
head1 = create_linked_list([1, 2, 3, 4])
result1 = swapPairs(head1)
print(linked_list_to_list(result1))  # Output: [2, 1, 4, 3]

# Test Case 2
head2 = create_linked_list([])
result2 = swapPairs(head2)
print(linked_list_to_list(result2))  # Output: []
